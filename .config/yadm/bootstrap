#!/usr/bin/env bash

# Variables
YADM="yadm"
GSETTINGS="gsettings"

MAG_SCHEME="org.gnome.desktop.a11y.magnifier"
MAG_FACTOR_KEY="mag-factor"
MAG_FACTOR_VAL="3.0"
MAG_FOCUS_KEY="focus-tracking"
MAG_FOCUS_VAL="none"
MAG_MOUSE_KEY="mouse-tracking"
MAG_MOUSE_VAL="centered"
MAG_CURSOR_KEY="caret-tracking"
MAG_CURSOR_VAL="centered"
MAG_POSITION_KEY="screen-position"
MAG_POSITION_VAL_SINGLE="full-screen"
MAG_POSITION_VAL_MULTI="left-half"

# Function to print an informational message, takes two arguments a number indicating the indend level and a string containing the message.
function LOGI {
	# Calculate the indent, each level adds two spaces.
	let indent=$(($1 * 2))

	# If the indent is zero just print the message. If greater than zero print the indent and the message.
	if [ $indent -eq 0 ];
	then
		echo "$2"
	else
		message=$(printf "%$(echo $indent)c==> %s" ' ' "$2")
		echo "$message"
	fi
}

# Function to log an error message. Pass a single string argument.
function LOGE {
	message=$(printf "Error: %s" "$1")
	echo "$message"
}

# Function to check return codes, Pass a number representing the return code to evaluate and a string containing the error message to print.
function check {
	# If the first argument is none zero, log the error message and exit.
	if [ $1 -ne 0 ];
	then
		LOGE "$2"
		exit $1
	fi
}

# Function to set GNOME settings values, You must pass three arguments, the scheme, key and new value.
function set_gsetting {
	# Check we have three arguments.
	if [ $# -ne 3 ];
	then
		LOGE "Invalid number of arguments $#"
		exit 1
	fi

	current=$($GSETTINGS get $1 $2)
	check $? "Unable to read gnome setting $1.$2"

	if [ "$3" != $current ];
	then
		LOGI 1 "Setting $2 to $3"
		$GSETTINGS set $1 $2 $3
		check $? "Unable to set value for setting $1.$2"
	fi
}

# Check that YADM is installed.
which $YADM > /dev/null
check $? "YADM is not installed"

# Initialise all YADM submodules.
LOGI 0 "Initialising sub-module(s)"
yadm submodule update --recursive --init > /dev/null 2>&1
check $? "Unable to initialise sub-module(s)"

HOST=$(uname -s)

if [ "$HOST" == "Linux" ];
then
	# Configure GNOME Magnifier via the GNOME settings daemon.
	LOGI 0 "Configuring GNOME Magnifier"
	which $GSETTINGS > /dev/null 2>&1
	check $? "Couldn't find GNOME settings, is this GNOME?"

	set_gsetting $MAG_SCHEME $MAG_FACTOR_KEY $MAG_FACTOR_VAL
	set_gsetting $MAG_SCHEME $MAG_FOCUS_KEY $MAG_FOCUS_VAL
	set_gsetting $MAG_SCHEME $MAG_CURSOR_KEY $MAG_CURSOR_VAL
	set_gsetting $MAG_SCHEME $MAG_MOUSE_KEY $MAG_MOUSE_VAL

    SCREENS=$(xrandr -q | grep -i " connected " | wc -l)
    if [ $SCREENS -eq 2 ];
    then
        set_gsetting $MAG_SCHEME $MAG_POSITION_KEY $MAG_POSITION_VAL_MULTI
    else
        set_gsetting $MAG_SCHEME $MAG_POSITION_KEY $MAG_POSITION_VAL_SINGLE
    fi

	# Configure zsh.
	LOGI 0 "Configuring zsh"
	if [ ! -f $HOME/.zshenv ];
	then
		ln -s $HOME/.config/zsh/.zshenv $HOME/.zshenv
		check $? "Couldn\'t create symbolic link to zsh environment"
	fi
else
	LOGE "Unknown host platform: $HOST"

	exit 1
fi

exit 0
